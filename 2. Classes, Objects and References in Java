1. Object-Oriented Programming (OOP) in Java
- In Java, everything is an object. Each object belongs to one type.
- For each object, what state does the object maintain? --> field/variable
  (eg. if a class is a house, the states describe the number/color/... of the doors, windows, ...)
- For each object, what behaviors does the object do?   --> method/function

2. Class
- A class is a blueprint that describes basic components of a given type.

3. Object
- An object is the instantiation of a class. 

4. Reference
- A reference is an object's address.
- Dereference: is the process of looking for given object using its reference.

5. Primitive types in Java (8):
- boolean: the default value is false.
- byte: the default value is 0.
- char: the default value is '\u0000'.
- short: the default value is 0. 
- int: the default value is 0.
- long: the default value is 0L.
- double: the default value is 0.0d.
- float: the default value is 0.0f.
- The default value of any object is null.
- It is not always necessary to assign a value to a field the time it is declared. 
- For a declared uninitialized filed, its value is set to a reasonable default value (zero/null) by the compiler. This coding style is not recommended.
- For a local variable, the compiler never assigns a default value to an uninitialized local variable.
- Accessing an uninitialized local variable causes compile-time error. Make sure to assign a local variable a value before using it.
- The above eight primitive types are directly stored in memory without any reference.

6. Mmory layout: call-stack and heap.
- call-stack: is a stack data structure that stores the information about the activities of a computer program.
  Call-stack is also known as execution stack, machine stack, program stack, or run-time stack.
- stack-frame: is a frame of data that gets pushed onto the stack. In the case of a call stack, a stack frame
  represents a function call and its argument data[1].
- heap: a heap is created when the JVM starts up. The size of a heap is dynamically changed which applications run.
- Java objects are stored in heap. The address of an object in the heap is a part of the reference.
- For a local variable, the primitive types are stored in the call-stack. The reference of an object is stored in the call-stack.
  An object is stored in the heap.
- For a field, the primitive types are stored in the heap. The reference of a field is also stored in the heap.

7. Objects in Java
- "new" (instantiation): means to create a new object which is stored in heap.
- Create an object: declaration --> instantiation --> initialization
  objectType objectName = new constructorName(...);
- Declaration: the type of an object could be a class, an interface, an enum, etc.
- "new" is a Java operator to create the object in the memory and then return its reference to "objectName".
  "new" is followed by a constructorName (which is the same as the name of this class).
  "new" is followed by a call to a constructor, which initializes the new object.
  
 8. A Java file.
 - File name is the class name. There is only one public class in each .java file.
 - Class name: UpperCamelCase
 - Method name / Field name: lowerCamelCase
 - Fields: member field, constant field (final), static field, static constant field.
 - There is garbage collection instead of destructor in Java.
 - Function signature = FunctionName + InputParameters + ReturnType.
 - Local variables: variables in a method.
 - Field: a variable that is out of a method.
 
 9. Constructor
 - A constructor is a special method to initialize an object. A constructor's name is the same as the class name. 
 - No distructor in Java, but Garbage Collection (GC). Nobody knows when GC starts to work for specific unused pieces.
 - Different constructors are generated by utilizing various input parameters.
 
 10. this
 - 'this' means the current instance. If the argument name is the same as the field name, 'this' is mandatory to be used.
 
 11. Null Pointers
 
 12. Access Modifiers
 
  
  
  [1] https://en.wikipedia.org
